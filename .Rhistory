geom_errorbar(data =adf, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="red") +
xlab("Window size") +
ylab("Average fixation duration, ms")+
scale_x_continuous(
breaks = c(1, 2, 3,4,5,6),
label = c("5","7","9","11","13","No Window")
)
plot(anp)
anp <- akh +geom_point(data =adf,aes(x=x, y=y), color="red", group=1)+ geom_line(data =adf, color = "red")+
geom_errorbar(data =adf, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="red") +
xlab("Window size") +
ylab("Average fixation duration (ms)")+
scale_x_continuous(
breaks = c(1, 2, 3,4,5,6),
label = c("5","7","9","11","13","No Window")
)
plot(anp)
save.image("E:/lab rotation linguistics/last 29/20180514.RData")
load("E:/lab rotation linguistics/last 29/20180514_crit.RData")
data_critical$cOPT <- data_critical$OPT - mean(data_critical$OPT)
data_critical$cSpel <- data_critical$Spel - mean(data_critical$Spel)
pop_sd_crit <- sd(data_critical$reading_rate)*sqrt((length(data_critical$reading_rate)-1)/(length(data_critical$reading_rate)))
pop_mean_crit <- mean(data_critical$reading_rate)
data_critical$zRR <- (data_critical$reading_rate - pop_mean_crit) / pop_sd_crit
model_RR_with_tests_ws_l1_other_order_crit<-lmer(zRR ~L1+ cOPT + cSpel *window_size   + (1+ window_size||RECORDING_SESSION_LABEL) + (1|item), data=data_critical, REML=FALSE)
model_RR_with_tests_ws_l1_other_order_crit<-lmer(zRR ~L1+ cOPT + cSpel *window_size   + (1+ window_size|RECORDING_SESSION_LABEL) + (1|item), data=data_critical, REML=FALSE)
model_RR_with_tests_ws_l1_other_order_crit<-lmer(reading_rate ~L1+ cOPT + cSpel *window_size   + (1+ window_size|RECORDING_SESSION_LABEL) + (1|item), data=data_critical, REML=FALSE)
model_RR_with_tests_ws_l1_other_order_crit<-lmer(zRR ~L1+ cOPT *window_size   + (1+|RECORDING_SESSION_LABEL) + (1|item), data=data_critical, REML=FALSE)
model_RR_with_tests_ws_l1_other_order_crit<-lmer(zRR ~L1+ cOPT *window_size   + (1|RECORDING_SESSION_LABEL) + (1|item), data=data_critical, REML=FALSE)
summary(model_RR_with_tests_ws_l1_other_order_crit)
p=lsmeansLT(model_RR_with_tests_ws_l1_other_order, test.effs="L1:window_size")
plot(p)
model_RR_with_tests_ws_l1_other_order<-lmer(reading_rate ~L1*window_size+ cOPT + cSpel    + (1+ window_size||RECORDING_SESSION_LABEL) + (1|item), data=ps_lab_data_critical, REML=FALSE)
hH <- hist(data_critical[data_critical$L1 == "H",]$reading_rate)
hU <- hist(data_critical[data_critical$L1 == "U",]$reading_rate)
plot( hH, col=rgb(0,0,1,1/4), xlim=c(0,max(data_critical[data_critical$L1 == "H",]$reading_rate)), main = "Reading rates", xlab = "Words per minute")  # first histogram
plot( hU, col=rgb(1,0,0,1/4), xlim=c(0,max(data_critical[data_critical$L1 == "U",]$reading_rate)), add=T)  # second
legend('topright',c('Hindi','Urdu'),
fill = rgb(1:0,0,0:1,0.4), bty = 'n',
border = NA)
#####zRR#####
pop_sd <- sd(ps_lab_data_critical$reading_rate)*sqrt((length(ps_lab_data_critical$reading_rate)-1)/(length(ps_lab_data_critical$reading_rate)))
pop_mean <- mean(ps_lab_data_critical$reading_rate)
ps_lab_data_critical$zRR <- (ps_lab_data_critical$reading_rate - pop_mean) / pop_sd
#####cOPT & cSpel####
ps_lab_data_critical$cOPT <- ps_lab_data_critical$OPT - mean(ps_lab_data_critical$OPT)
ps_lab_data_critical$cSpel <- ps_lab_data_critical$Spel - mean(ps_lab_data_critical$Spel)
model_first<-lmer(reading_rate ~L1*window_size + OPT + Spel + (1+window_size|RECORDING_SESSION_LABEL) + (1 + OPT + Spel|item), data=data_critical, REML=FALSE)
model_first<-lmer(reading_rate ~L1*window_size + OPT + Spel + (1+window_size|RECORDING_SESSION_LABEL) + (1 + window_size|item), data=data_critical, REML=FALSE)
model_first<-lmer(reading_rate ~L1*window_size + OPT + Spel + (1+window_size|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
summary(model_first)
model_first_c<-lmer(reading_rate ~L1*window_size + cOPT + cSpel + (1+window_size|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
summary(model_first_c)
model_first_c<-lmer(reading_rate ~L1*window_size + cOPT + cSpel + (1+window_size|RECORDING_SESSION_LABEL) + (1 + cOPT|item), data=data_critical, REML=FALSE)
model_first_c<-lmer(reading_rate ~L1*window_size + cOPT + cSpel + (1+window_size|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
model_simpler_c<-lmer(reading_rate ~L1*window_size + cOPT + cSpel + (1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
summary(model_simpler_c)
model_simplest_c<-lmer(reading_rate ~L1*window_size + cOPT (1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
model_simplest_c<-lmer(reading_rate ~L1*window_size + cOPT + (1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
summary(model_simplest_c)
model_simplest_c<-lmer(reading_rate ~L1*window_size + cOPT + (1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical)
summary(model_simplest_c)
vcov(model_simplest_c)
print(model_simplest_c, correlation=TRUE)
model_simplest_c<-lmer(reading_rate ~L1*window_size + OPT + (1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical)
summary(model_simplest_c)
model_simplest_c<-lmer(reading_rate ~L1*window_size + OPT + (1+window_size|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical)
model_simplest_c<-lmer(reading_rate ~L1*window_size + OPT + (1|RECORDING_SESSION_LABEL) + (1+OPT |item), data=data_critical)
model_simplest_c<-lmer(reading_rate ~L1*window_size + OPT + Spel (1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical)
model_simplest_c<-lmer(reading_rate ~L1*window_size + OPT + Spel+ (1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical)
summary(model_simplest_c)
model_simplest_c<-lmer(reading_rate ~L1*window_size +(1|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical)
summary(model_simplest_c)
model_second<-lmer(AVERAGE_FIXATION_DURATION ~L1*window_size  + (1+ window_size|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
summary(model_second)
model_second<-lmer(AVERAGE_FIXATION_DURATION ~L1*window_size +OPT + (1+ window_size|RECORDING_SESSION_LABEL) + (1 |item), data=data_critical, REML=FALSE)
summary(model_second)
p <- summary(data_critical %>%
filter(window_size=="7") %>%
filter(L1=="H")%>%
select(reading_rate))
#####library(dplyr)#####
library(dplyr)
p <- summary(data_critical %>%
filter(window_size=="7") %>%
filter(L1=="H")%>%
select(reading_rate))
p
u <- summary(data_critical %>%
filter(window_size=="7") %>%
filter(L1=="U")%>%
select(reading_rate))
u
##to connect dataframes
##df3 <- rbind(df1,df2)
##3 mean
##4 SD
SDs <- ddply(data_critical, c("L1", "window_size"), summarise,
mean = mean(reading_rate), sd = sd(reading_rate),
sem = sd(reading_rate)/sqrt(length(reading_rate)))
data_critical <- data.frame()
####test data; SDs to find out how much data are outliers#######
require(plyr)
data_critical <- data.frame()
SDs <- ddply(data_critical, c("L1", "window_size"), summarise,
mean = mean(reading_rate), sd = sd(reading_rate),
sem = sd(reading_rate)/sqrt(length(reading_rate)))
SDs_crit <- ddply(data_critical, c("L1", "window_size"), summarise,
mean = mean(reading_rate), sd = sd(reading_rate),
sem = sd(reading_rate)/sqrt(length(reading_rate)))
##to connect dataframes
##df3 <- rbind(df1,df2)
##3 mean
##4 SD
SDs <- ddply(ps_lab_data_critical_test, c("L1", "window_size"), summarise,
mean = mean(reading_rate), sd = sd(reading_rate),
sem = sd(reading_rate)/sqrt(length(reading_rate)))
data_critical <- data.frame()
for (i in 1:12) {
temp_data <- ps_lab_data_critical_test[(ps_lab_data_critical_test$reading_rate < SDs[i,3]+2.5*SDs[i,4])
&(ps_lab_data_critical_test$L1==SDs[i,1])
&(ps_lab_data_critical_test$window_size==SDs[i,2]),]
data_critical <- rbind(data_critical,temp_data)
}
SDs_crit <- ddply(data_critical, c("L1", "window_size"), summarise,
mean = mean(reading_rate), sd = sd(reading_rate),
sem = sd(reading_rate)/sqrt(length(reading_rate)))
View(SDs_crit)
View(SDs_crit)
View(SDs_crit)
ddply(data_critical, c("L1", "window_size"), summarise,
mean = mean(reading_rate), sd = sd(reading_rate),
sem = sd(reading_rate)/sqrt(length(reading_rate)))
ddply(data_critical, c("L1", "window_size"), summarise,
mean = mean(AVERAGE_FIXATION_DURATION), sd = sd(AVERAGE_FIXATION_DURATION),
sem = sd(AVERAGE_FIXATION_DURATION)/sqrt(length(AVERAGE_FIXATION_DURATION)))
plot(np)
legend('topright',c('Hindi','Urdu'),
fill = rgb(1:0,0,0:1,0.4), bty = 'n',
border = NA)
np <- kh +geom_point(data =df,aes(x=x, y=y), color="red", group=1)+ geom_line(data =df, color = "red")+
geom_errorbar(data =df, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="Urdu") +
scale_colour_manual(name="Line Color",
values=c(Urdu="red"))+
xlab("Window size") +
ylab("Reading rate (words/min)")+
theme_linedraw()+
theme_light()+
theme_solarized_2()+
#theme_fivethirtyeight()+
scale_x_continuous(
breaks = c(1, 2, 3,4,5,6),
label = c("5","7","9","11","13","No Window")
)
np <- kh +geom_point(data =df,aes(x=x, y=y), color="red", group=1)+ geom_line(data =df, color = "red")+
geom_errorbar(data =df, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="red") +
+ scale_fill_discrete(labels=c("Urdu", "Hindi"))
require(ggplot2)
np <- kh +geom_point(data =df,aes(x=x, y=y), color="red", group=1)+ geom_line(data =df, color = "red")+
geom_errorbar(data =df, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="red") +
+ scale_fill_discrete(labels=c("Urdu", "Hindi"))
np <- kh +geom_point(data =df,aes(x=x, y=y), color="red", group=1)+ geom_line(data =df, color = "red")+
geom_errorbar(data =df, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="red") +
+ scale_colour_discrete(name  ="L1",
breaks=c("U", "H"),
labels=c("Urdu", "Hindi")) +
xlab("Window size") +
ylab("Reading rate (words/min)")+
theme_linedraw()+
theme_light()+
theme_solarized_2()+
#theme_fivethirtyeight()+
scale_x_continuous(
breaks = c(1, 2, 3,4,5,6),
label = c("5","7","9","11","13","No Window")
)
plot(np)
save.image("E:/lab rotation linguistics/last 29/20180514(3).RData")
load("E:/lab rotation linguistics/last 29/20180514(3).RData")
#######graph av.fix.dur critical_data 573*350#######264*620######
adf = aggregate(list(y = data_critical_U$AVERAGE_FIXATION_DURATION),list(x = data_critical_U$window_size),mean)
adf1 = aggregate(list(se = data_critical_U$AVERAGE_FIXATION_DURATION),list(x = data_critical_U$window_size),
FUN = function(x){1.96*(sd(x)/sqrt(length(x)))})
adf$se = adf1$se
adfH = aggregate(list(y = data_critical_H$AVERAGE_FIXATION_DURATION),list(x = data_critical_H$window_size),mean)
adf1H = aggregate(list(se = data_critical_H$AVERAGE_FIXATION_DURATION),list(x = data_critical_H$window_size),
FUN = function(x){1.96*(sd(x)/sqrt(length(x)))})
adfH$se = adf1H$se
adfH$x <- factor(adfH$x, levels=c("5","7","9","11","13","NW"))
adf$x <- factor(adf$x, levels=c("5","7","9","11","13","NW"))
adfH[] <- lapply(adfH, as.numeric)
adf[] <- lapply(adf, as.numeric)
akh <- ggplot(adfH,aes(x=x, y=y), group=1)+ geom_path(color = "aquamarine2")+
geom_point(color = "blue") +
geom_errorbar(aes(ymax = y+se, ymin = y-se,x=x), width = .25, color = "aquamarine2")
require(ggplot2)
akh <- ggplot(adfH,aes(x=x, y=y), group=1)+ geom_path(color = "aquamarine2")+
geom_point(color = "blue") +
geom_errorbar(aes(ymax = y+se, ymin = y-se,x=x), width = .25, color = "aquamarine2")
akh
anp <- akh +geom_point(data =adf,aes(x=x, y=y), color="red", group=1)+ geom_line(data =adf, color = "goldenrod2")+
geom_errorbar(data =adf, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="goldenrod2") +
xlab("Window size") +
ylab("Average fixation duration (ms)")+
theme_linedraw()+
theme_light()+
#theme_wsj()+
theme_solarized_2()+
#theme_tufte()+
scale_x_continuous(
breaks = c(1, 2, 3,4,5,6),
label = c("5","7","9","11","13","No Window")
)
plot(anp)
akh <- ggplot(adfH,aes(x=x, y=y), group=1)+ geom_path(color = "aquamarine2")+
geom_point(color = "aquamarine2") +
geom_errorbar(aes(ymax = y+se, ymin = y-se,x=x), width = .25, color = "aquamarine2")
akh
anp <- akh +geom_point(data =adf,aes(x=x, y=y), color="goldenrod2", group=1)+ geom_line(data =adf, color = "goldenrod2")+
geom_errorbar(data =adf, aes(ymax = y+se, ymin = y-se,x=x), width = .25, color="goldenrod2") +
xlab("Window size") +
ylab("Average fixation duration (ms)")+
theme_linedraw()+
theme_light()+
#theme_wsj()+
theme_solarized_2()+
#theme_tufte()+
scale_x_continuous(
breaks = c(1, 2, 3,4,5,6),
label = c("5","7","9","11","13","No Window")
)
plot(anp)
boxplot(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Oxford Placement Test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="indianred4")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language",
bg="gray")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language",
bg="gray")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language",
par(bg="gray"))
par(bg = "thistle")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
par(bg = "floralwhite")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="indianred4")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="indianred4")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
#par(bg = "floralwhite")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="white", add = TRUE)
#par(bg = "floralwhite")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language",add = TRUE)
#par(bg = "floralwhite")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="indianred4")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
m = c(mean(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"]),mean(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"]))
se = c(sd(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"])/sqrt(length(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"])),
sd(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"])/sqrt(length(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"])))
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="indianred4")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=10, col="white")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=6, col="white")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=8, col="white")
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=8, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=1, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=20, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language",bg=101)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language",bg=101)
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
par(bg='floralwhite')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=20, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Oxford Placement Test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=15, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
boxplot(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Oxford Placement Test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=20, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
m = c(mean(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"]),mean(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"]))
se = c(sd(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"])/sqrt(length(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"])),
sd(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"])/sqrt(length(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"])))
boxplot(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Oxford Placement Test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=20, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
m = c(mean(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"]),mean(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"]))
se = c(sd(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"])/sqrt(length(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"])),
sd(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"])/sqrt(length(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"])))
par(bg='coral')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=20, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
par(bg='burlywood1')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
par(bg='cornsilk')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
par(bg='blanchedalmond')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
m = c(mean(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"]),mean(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"]))
se = c(sd(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"])/sqrt(length(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"])),
sd(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"])/sqrt(length(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"])))
par(bg='blanchedalmond')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
par(bg='lemonchiffon')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
par(bg='moccasin')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
par(bg='papayawhip')
boxplot(ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$Spel[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
#bg="floralwhite",
col = c("blue","red"),
ylab="Spelling test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=20, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
m = c(mean(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"]),mean(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"]))
se = c(sd(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"])/sqrt(length(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"])),
sd(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"])/sqrt(length(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"])))
par(bg='papayawhip')
boxplot(ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="H"], ps_lab_data_critical$OPT[ps_lab_data_critical$L1=="U"],
names=c("Hindi", "Urdu"),
col = c("blue","red"),
ylab="Oxford Placement Test", xlab="Native Language")
#plotted 95% CIs so that they will be easier to see
points(c(1,2), m, pch=20, col="white")
arrows(x0=1:2, y0=m-(1.96*se), y1=m+(1.96*se), code=3, angle=90, length=.1)
summary(model_simplest_c)
summary(model_second)
save.image("E:/lab rotation linguistics/last 29/20180515.RData")
version
load("E:/lab rotation linguistics/last 29/.RData")
View(SDs)
View(SDs_ohne_gender)
View(SDs_original)
SDs_original <- ddply(task_data, c("X.Subject_Gender.", "X.Object_Gender."), summarise,
mean = mean(X.ReadTimes.), sd = sd(X.ReadTimes.),
sem = sd(X.ReadTimes.)/sqrt(length(X.ReadTimes.)))
#task_data$condition<-ifelse((task_data$X.Object_Gender.=="\"mismatch\"")&(task_data$X.Subject_Gender.=="\"mismatch\""), 4, 0)
require(plyr)
SDs_original <- ddply(task_data, c("X.Subject_Gender.", "X.Object_Gender."), summarise,
mean = mean(X.ReadTimes.), sd = sd(X.ReadTimes.),
sem = sd(X.ReadTimes.)/sqrt(length(X.ReadTimes.)))
SDs_original
SDs_original_with_gender <- ddply(task_data, c("X.Subject_Gender.", "X.Object_Gender."), summarise,
mean = mean(X.ReadTimes.), sd = sd(X.ReadTimes.),
sem = sd(X.ReadTimes.)/sqrt(length(X.ReadTimes.)))
SDs_original_with_gender <- ddply(task_data, c("X.Subject_Gender.", "X.Object_Gender.", "X.Gender."), summarise,
mean = mean(X.ReadTimes.), sd = sd(X.ReadTimes.),
sem = sd(X.ReadTimes.)/sqrt(length(X.ReadTimes.)))
SDs_original_with_gender
setwd("C:/Users/kole021/git/Thesis/")
ps_lab_data_58each <-read.table("df_nouns_and_all_words_counts_whole_corpus_58each.csv", quote = "", fill = TRUE, header = TRUE, sep = "\t")
ps_lab_data_58each$NounsToWords <- ps_lab_data_58each$NounsN/ps_lab_data_58each$WordsN*1000
ps_lab_data_58each$CNCtoNouns <- ps_lab_data_58each$CNCsNounsN/ps_lab_data_58each$NounsN*1000
ps_lab_data_58each$CNCtoWords <- ps_lab_data_58each$CNCsNounsN/ps_lab_data_58each$WordsN*1000
library(psych)
#install.packages("dplyr")
library(dplyr)
res.aovEFull <- aov(NounsToWords ~ Subcorpus*Teil, data = ps_lab_data_58each)
summary(res.aovEFull)
TukeyHSD((res.aovEFull))
summa = summary(res.aovEFull)
write.csv(t(as.matrix(summa)), file="name.csv")
write.csv(summa), file="name.csv")
write.csv((summa), file="name.csv")
sink("summary.txt")
summary(res.aovEFull)
sink()
sink("summary.txt")
TukeyHSD((res.aovEFull))
sink()
